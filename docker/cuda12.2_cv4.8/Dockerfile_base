# Base image with CUDA 12.0 support
FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu20.04

# Set environment variables for non-interactive installs
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies
RUN apt-get update && apt-get install -y --fix-broken\
    python3 python3-pip python3-dev python-is-python3 \
    cmake build-essential git wget \
    libjpeg-dev libpng-dev libtiff-dev libwebp-dev libopenexr-dev \
    libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
    libxvidcore-dev libx264-dev libxine2-dev \
    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    libatlas-base-dev liblapacke-dev gfortran libhdf5-dev \
    libprotobuf-dev protobuf-compiler libgoogle-glog-dev \
    libgflags-dev libeigen3-dev libceres-dev libboost-all-dev \
    libopenblas-dev liblapack-dev liblapacke-dev libopenblas-dev \
    cmake libtbb2 g++ unzip ffmpeg libgtk2.0-dev libavutil-dev libtbb-dev \
    libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libgtkglext1-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Python packages
RUN pip3 install --no-cache-dir \
    scikit-learn==1.3.2 \
    matplotlib==3.7.5 \
    scipy==1.10.1 \
    numpy==1.24.4 \
    kornia==0.7.3 \
    scikit-image==0.21.0 \
    pandas==2.0.3 \
    ninja==1.11.1.3 \
    certifi==2024.7.4 \
    charset-normalizer==3.3.2 \
    clarabel==0.7.1 \
    cvxpy==1.5.2 \
    ecos==2.0.13 \
    fonttools==4.50.0 \
    fsspec==2025.2.0 \
    idna==3.7 \
    importlib-resources==6.4.0 \
    jinja2==3.1.4 \
    joblib==1.3.2 \
    kiwisolver==1.4.5 \
    nvidia-nccl-cu12==2.18.1 \
    nvidia-nvjitlink-cu12==12.8.61 \
    osqp==0.6.5 \
    packaging==24.0 \
    pillow==10.3.0 \
    pyparsing==3.1.2 \
    pytz==2024.1 \
    qdldl==0.1.7.post0 \
    scs==3.2.4.post1 \
    six==1.16.0 \
    threadpoolctl==3.4.0 \
    torch==2.1.0 \
    torchvision==0.16.0 \
    triton==2.1.0 \
    tzdata==2024.1 \
    urllib3==2.2.2 \
    zipp==3.18.1

# Disable certificate verification for git
RUN git config --global http.sslVerify false

# Compile OpenCV with CUDA support
# note the changes we make to the source code to make it compile (sed commands)
WORKDIR /opencv
RUN git clone --branch 4.8.1 --depth 1 https://github.com/opencv/opencv.git && \
    git clone --branch 4.8.1 --depth 1 https://github.com/opencv/opencv_contrib.git && \
    sed -i 's/if (\(weight\) != 1.0)/if (static_cast<double>(\1) != 1.0)/' /opencv/opencv/modules/dnn/src/cuda4dnn/primitives/normalize_bbox.hpp && \
    sed -i 's/if (\(nms_iou_threshold\) > 0)/if (static_cast<double>(\1) > 0)/' /opencv/opencv/modules/dnn/src/cuda4dnn/primitives/region.hpp && \
    mkdir build && \
    cd build && \
    cmake -D CMAKE_INSTALL_PREFIX=/usr/local \
          -DBUILD_JPEG=ON \
          -DBUILD_WEBP=ON \
          -DBUILD_PNG=ON \
          -DBUILD_TIFF=ON \
          -DWITH_FFMPEG=ON \
          -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
          -D WITH_TBB=ON \
          -D ENABLE_FAST_MATH=1 \
          -D CUDA_FAST_MATH=1 \
          -D WITH_CUBLAS=1  \
          -D WITH_CUDA=ON \
          -D BUILD_opencv_cudacodec=OFF \
          -D WITH_CUDNN=ON \
          -D OPENCV_DNN_CUDA=ON \
          -D WITH_V4L=ON \
          -D WITH_QT=OFF \
          -D WITH_FFMPEG=ON \
          -D WITH_OPENGL=ON \
          -D WITH_GSTREAMER=ON \
          -D WITH_GSTREAMER_1_0=ON \
          -D OPENCV_GENERATE_PKGCONFIG=ON \
          -D OPENCV_PC_FILE_NAME=opencv.pc \
          -D OPENCV_ENABLE_NONFREE=ON \
          -D INSTALL_PYTHON_EXAMPLES=OFF \
          -D INSTALL_C_EXAMPLES=OFF \
          -D BUILD_EXAMPLES=OFF \
          -D CMAKE_CXX_STANDARD=14 \
          -D PYTHON_EXECUTABLE=$(which python3) \
          -D OPENCV_PYTHON3_INSTALL_PATH=/usr/local/lib/python3.8/dist-packages \
          ../opencv && \
    make -j$(nproc) && make install && ldconfig 
